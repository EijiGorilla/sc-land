"use strict";(self.webpackChunksc_land=self.webpackChunksc_land||[]).push([[46745],{46745:(e,t,n)=>{n.r(t),n.d(t,{TextureCompressionWorkerOutput:()=>d,compress:()=>f,compressRGBADataToKTX2:()=>C,createTextureDataKTX2:()=>T,initializeBasisEncoder:()=>p,initializeDXTEncoder:()=>w});var a=n(28899);let r;var s=n(45235);let l;var i=n(93345);let c,o,u=null,h=null;class d{constructor(e,t){this.internalFormat=e,this.compressedTexture=t}}async function f(e){let t;if(t=e.data instanceof ImageBitmap?function(e){const t=new OffscreenCanvas(e.width,e.height),n=t.getContext("2d");return n.drawImage(e,0,0),n.getImageData(0,0,t.width,t.height).data}(e.data):function(e,t,n,a,r){const s=new Uint8ClampedArray(e).subarray(0,t*n*a);if(!r)return s;const l=new Uint8ClampedArray(s.length),i=t*a;for(let c=0;c<n;c++){const e=c*i,t=(n-c-1)*i;l.set(s.subarray(e,e+i),t)}return l}(e.data,e.width,e.height,e.components,e.needsFlip),e.hasS3TC){h||await w();const n=new Uint8Array(t.length);if(h?.encode(t,e.width,e.height,e.preMultiplyAlpha,n)){const e=function(e,t){const n=new Int32Array(e.buffer,e.byteOffset,m);let a,r;switch(n[b]){case R:a=8,r=i.CQ.COMPRESSED_RGB_S3TC_DXT1_EXT;break;case X:a=16,r=i.CQ.COMPRESSED_RGBA_S3TC_DXT3_EXT;break;case B:a=16,r=i.CQ.COMPRESSED_RGBA_S3TC_DXT5_EXT;break;default:return null}let s=1,l=n[E],c=n[g];(3&l||3&c)&&(l=l+3&-4,c=c+3&-4);const o=l,u=c;let h,d;n[A]&S&&!1!==t&&(s=Math.max(1,n[_]));let f=e.byteOffset+n[y]+4;const p=[];for(let i=0;i<s;++i)d=(l+3>>2)*(c+3>>2)*a,h=new Uint8Array(e.buffer,f,d),p.push(h),f+=d,l=Math.max(1,l>>1),c=Math.max(1,c>>1);return{textureData:{type:"compressed",levels:p},internalFormat:r,width:o,height:u}}(n,!0),t=[n.buffer];return{result:new d(e?.internalFormat??null,e?.textureData??null),transferList:t}}return{result:new d(null,null)}}if(e.hasETC){if(u||await p(),e.preMultiplyAlpha&&!h&&await w(),e.preMultiplyAlpha){const n=new Uint8ClampedArray(t.length);h?.premultiply(new Uint8Array(t),e.width,e.height,n),t=n}const n=await C(t,e.width,e.height,e.hasMipmap),a=n?await T(n):null,r=a?.compressedTexture?.levels.map((e=>e.buffer))||[];return{result:new d(a?.internalFormat??null,a?.compressedTexture??null),transferList:r}}return{result:new d(null,null)}}async function p(){u||(u=await(c??=(r??=(async()=>{const e=await n.e(56378).then(n.bind(n,56378)),t=await e.default({locateFile:e=>(0,a.s)(`esri/libs/basisu/${e}`)});return t.initializeBasis(),t})(),r)))}async function w(){h||(h=await(o??=(l??=(async()=>{const e=await n.e(53996).then(n.bind(n,53996));return await e.default({locateFile:e=>(0,a.s)(`esri/libs/dxtEncoder/${e}`)})})(),l)))}async function C(e,t,n,a){let r=arguments.length>4&&void 0!==arguments[4]?arguments[4]:255,s=arguments.length>5&&void 0!==arguments[5]?arguments[5]:0,l=arguments.length>6&&void 0!==arguments[6]&&arguments[6],i=arguments.length>7&&void 0!==arguments[7]&&arguments[7];if(!u)return null;const c=new u.BasisEncoder;c.setPerceptual(!i),c.setCheckForAlpha(!0),c.setForceAlpha(!1),c.setRenormalize(i),c.setMipGen(a),c.setMipSRGB(!i),c.setCreateKTX2File(!0),c.setKTX2SRGBTransferFunc(!i),c.setQualityLevel(r),c.setCompressionLevel(s);const o=new Uint8Array(e.byteLength);c.setSliceSourceImage(0,new Uint8Array(e),t,n,l);const h=c.encode(o),d=new Uint8Array(o.buffer,0,h),f=new u.KTX2File(new Uint8Array(d));return f.isValid()?(c.delete(),d):(f.close(),f.delete(),c.delete(),null)}async function T(e){if(!u)return new d(null,null);const t=new u.KTX2File(new Uint8Array(e));t.startTranscoding();const[n,a]=t.getHasAlpha()?[s.n.ETC2_RGBA,i.CQ.COMPRESSED_RGBA8_ETC2_EAC]:[s.n.ETC1_RGB,i.CQ.COMPRESSED_RGB8_ETC2],r=t.getLevels(),l=[];for(let s=0;s<r;s++)l.push(new Uint8Array(t.getImageTranscodedSizeInBytes(s,0,0,n))),t.transcodeImage(l[s],s,0,0,n,0,-1,-1);return t.close(),t.delete(),{internalFormat:a,compressedTexture:{type:"compressed",levels:l}}}const m=31,y=1,A=2,g=3,E=4,_=7,b=21,S=131072;function D(e){return e.charCodeAt(0)+(e.charCodeAt(1)<<8)+(e.charCodeAt(2)<<16)+(e.charCodeAt(3)<<24)}const R=D("DXT1"),X=D("DXT3"),B=D("DXT5")}}]);
//# sourceMappingURL=46745.c5cd3a8a.chunk.js.map