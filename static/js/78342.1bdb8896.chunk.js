"use strict";(self.webpackChunksc_land=self.webpackChunksc_land||[]).push([[78342],{78342:(a,e,i)=>{i.r(e),i.d(e,{default:()=>f});var s=i(50076),n=i(28383),l=i(90494),r=i(42633),t=i(11563);const o=5;async function f(a){const{layerAdapter:e,...i}=await async function(a){if(!a?.layer||!a.field&&!a.valueExpression)throw new s.default("class-breaks:missing-parameters","'layer' and 'field' or 'valueExpression' parameters are required");if(a.valueExpression&&!a.view)throw new s.default("class-breaks:missing-parameters","View is required when 'valueExpression' is specified");a.forBinning&&(0,l.p)(a,"class-breaks");const{layer:e,...i}=a,f=a.forBinning?t.Mi:t.J4,u=(0,t.Jg)(e,f,a.forBinning);if(!u)throw new s.default("class-breaks:invalid-parameters","'layer' must be one of these types: "+(0,t.Ho)(f).join(", "));const d={layerAdapter:u,...i};d.normalizationType=(0,r.Wy)(d),d.numClasses=d.numClasses||o;const p=null!=d.signal?{signal:d.signal}:null;await u.load(p);const m=d.field,w=d.minValue,c=d.maxValue,h=null!=w||null!=c,v=d.classificationMethod,b="percent-of-total"===d.normalizationType,g=!1!==d.analyzeData,y=m?u.getField(m):null,k=await(0,r.EG)({field:d.field,normalizationField:d.normalizationField,valueExpression:d.valueExpression}),z=(0,n.MH)(u,k,"class-breaks:invalid-parameters");if(z)throw z;if(y){const a=(0,n.hw)(u,y,"class-breaks:invalid-parameters");if(a)throw a}if(d.valueExpression&&d.normalizationType)throw new s.default("class-breaks:invalid-parameters","Normalization is not allowed when 'valueExpression' is specified");if(h)if(g){if(b&&null==d.normalizationTotal)throw new s.default("class-breaks:missing-parameters","'normalizationTotal' is required when 'normalizationType' is 'precent-of-total' and 'minValue', 'maxValue' are specified")}else{if(null==w||null==c)throw new s.default("class-breaks:missing-parameters","Both 'minValue' and 'maxValue' are required when 'analyzeData' is false");if(w>=c)throw new s.default("class-breaks:invalid-parameters","'minValue' should be less than 'maxValue'");if(v&&"equal-interval"!==v)throw new s.default("class-breaks:invalid-parameters","'classificationMethod' other than 'equal-interval' is not allowed when 'analyzeData' is false");if(b&&null==d.normalizationTotal)throw new s.default("class-breaks:missing-parameters","'normalizationTotal' is required when 'normalizationType' is 'precent-of-total' and 'analyzeData' is false")}else if(!g)throw new s.default("class-breaks:missing-parameters","Both 'minValue' and 'maxValue' are required when 'analyzeData' is false");d.filter&&!d.filter.spatialRelationship&&(d.filter.spatialRelationship="intersects");const x=(0,n.Wk)(d.filter,"class-breaks:invalid-parameters");if(x)throw x;return d}(a);return e.classBreaks(i)}},90494:(a,e,i)=>{i.d(e,{p:()=>l,z:()=>n});var s=i(50076);const n="aggregateCount";function l(a,e){if(!a.view)throw new s.default(`${e}:missing-parameters`,"'view' parameter is required for binning");if(a.sqlExpression)throw new s.default(`${e}:invalid-parameters`,"'sqlExpression' parameter is not supported for binning");if("3d"===a.view.type)throw new s.default(`${e}:invalid-parameters`,"3d view is not supported for binning")}}}]);
//# sourceMappingURL=78342.1bdb8896.chunk.js.map